#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

LOG_FILE="/var/log/phpx.log"
dry_run=false

require_sudo() {
  if [[ "$EUID" -ne 0 ]]; then
    echo -e "${RED}Please run the script with sudo.${NC}"
    exit 1
  fi
}

log_action() {
  local level="$1"
  local message="$2"
  local current_time
  current_time=$(date +'%Y-%m-%d %H:%M:%S')
  case "$level" in
    DEBUG|INFO|WARN|ERROR)
      echo "$current_time - [$level] - $message" >>"$LOG_FILE"
      ;;
    *)
      echo "$current_time - [UNKNOWN] - $message" >>"$LOG_FILE"
      ;;
  esac
}

safe_run() {
  if [[ "$dry_run" == true ]]; then
    echo "Dry run: $@"
    log_action "DEBUG" "Dry run: $@"
  else
    log_action "INFO" "Running command: $@"
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
      echo -e "${RED}Error occurred during: $@${NC}"
      log_action "ERROR" "Failed to execute: $@"
      exit $status
    fi
  fi
}

validate_php_version() {
  local version="$1"
  if ! [[ "$version" =~ ^[0-9]+\.[0-9]+$ ]]; then
    echo -e "${RED}Invalid PHP version format. Expected format: X.Y (e.g., 8.2).${NC}"
    exit 1
  fi
}

check_and_add_sury_repo() {
  if ! grep -q "^deb .\+sury" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
    echo -e "${YELLOW}Sury repository not found. Adding it...${NC}"
    safe_run apt install -y ca-certificates apt-transport-https software-properties-common
    wget -q https://packages.sury.org/php/apt.gpg -O- | tee /etc/apt/trusted.gpg.d/php-sury.gpg
    echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" >/etc/apt/sources.list.d/php.list
    safe_run apt update
    log_action "SUCCESS" "Sury repository added."
  fi
}

install_php_version() {
  local version="$1"
  validate_php_version "$version"
  echo -e "${YELLOW}Installing PHP $version and required packages...${NC}"
  safe_run apt install -y "php$version" "php$version-cli" "php$version-fpm"
  log_action "SUCCESS" "Installed PHP $version, PHP-CLI, and PHP-FPM."
}

configure_web_server_and_install_php() {
  local version="$1"
  declare -A servers=( ["apache2"]="Apache" ["nginx"]="Nginx" ["lighttpd"]="Lighttpd" )
  local available_servers=()

  for service in "${!servers[@]}"; do
    if systemctl status "$service" &>/dev/null; then
      available_servers+=("$service")
    fi
  done

  if [[ ${#available_servers[@]} -eq 0 ]]; then
    echo -e "${YELLOW}No supported web servers (Apache, Nginx, Lighttpd) detected.${NC}"
    install_php_version "$version"
    return 0
  fi

  echo -e "${YELLOW}Detected web servers:${NC}"
  for i in "${!available_servers[@]}"; do
    echo "$((i + 1)). ${servers[${available_servers[$i]}]}"
  done

  read -rp "Select a web server to configure with PHP $version (enter number): " server_selection
  while ! [[ "$server_selection" =~ ^[0-9]+$ && "$server_selection" -ge 1 && "$server_selection" -le ${#available_servers[@]} ]]; do
    echo -e "${RED}Invalid selection. Please enter a number between 1 and ${#available_servers[@]}.${NC}"
    read -rp "Select a web server to configure with PHP $version (enter number): " server_selection
  done
  local selected_server="${available_servers[$((server_selection - 1))]}"

  install_php_version "$version"

  case "$selected_server" in
    apache2)
      if systemctl status php$version-fpm &>/dev/null; then
        echo -e "${YELLOW}Apache is using PHP-FPM...${NC}"
        a2enconf "php$version-fpm"
        systemctl restart apache2
      else
        echo -e "${YELLOW}Apache is not using PHP-FPM. Installing regular PHP module...${NC}"
        a2dismod "php$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')"
        a2enmod "php$version"
        systemctl restart apache2
      fi
      ;;
    nginx|lighttpd)
      echo -e "${YELLOW}Configuring $selected_server to use PHP-FPM...${NC}"
      echo -e "Update your config to point to: /run/php/php$version-fpm.sock"
      ;;
  esac
}

switch_php_version() {
  require_sudo
  local version="$1"
  if ! command -v "/usr/bin/php$version" &>/dev/null; then
    echo -e "${YELLOW}PHP $version is not installed.${NC}"
    check_and_add_sury_repo
    configure_web_server_and_install_php "$version"
  else
    echo -e "${GREEN}PHP $version is already installed.${NC}"
    log_action "SUCCESS" "Switched to PHP $version"
  fi

  # Set PHP CLI version using update-alternatives
  safe_run update-alternatives --set php "/usr/bin/php$version"
  safe_run update-alternatives --set phar "/usr/bin/phar$version"
  safe_run update-alternatives --set phar.phar "/usr/bin/phar.phar$version"
  echo -e "${GREEN}Switched PHP CLI to version $version.${NC}"

  configure_web_server_and_install_php "$version"
}

install_php_extensions() {
  require_sudo
  local version="$1"

  # Auto-detect the currently active PHP version if no version is provided
  if [[ -z "$version" ]]; then
    version=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')
    echo -e "${YELLOW}No PHP version provided. Using detected PHP version: $version${NC}"
  fi

  echo -e "${YELLOW}Fetching installed PHP extensions for PHP $version...${NC}"
  local installed_extensions=( $(dpkg -l | grep "^ii" | grep "php$version-" | awk '{print $2}' | sort) )

  if [[ ${#installed_extensions[@]} -eq 0 ]]; then
    echo -e "${RED}No PHP extensions are installed for PHP $version.${NC}"
  else
    echo -e "${GREEN}Installed PHP extensions for PHP $version:${NC}"
    printf '%s\n' "${installed_extensions[@]}"
  fi

  echo -e "${YELLOW}Fetching installable PHP extensions for PHP $version...${NC}"
  local available_extensions=( $(apt-cache pkgnames | grep "^php$version-") )
  local extensions_to_install=""

  echo "Installable PHP extensions for PHP $version:"
  printf '%s\n' "${available_extensions[@]}"

  read -rp "Enter the numbers of the extensions you want to install (comma-separated or range): " extension_selection
  IFS=',' read -ra selection_array <<<"$extension_selection"
  for selection in "${selection_array[@]}"; do
    if [[ "$selection" =~ ^[0-9]+$ && "$selection" -ge 1 && "$selection" -le ${#available_extensions[@]} ]]; then
      extensions_to_install+="${available_extensions[$((selection - 1))]} "
    fi
  done

  if [[ -n "$extensions_to_install" ]]; then
    echo -e "${YELLOW}Installing selected extensions in parallel...${NC}"
    echo "$extensions_to_install" | xargs -n1 -P4 -I{} safe_run apt install -y "{}"
    log_action "SUCCESS" "Extensions installed for PHP $version: $extensions_to_install"
    echo -e "${GREEN}Extensions installed for PHP $version: $extensions_to_install${NC}"
  else
    echo -e "${YELLOW}No new extensions were selected for installation.${NC}"
  fi
}

install_composer() {
  require_sudo
  if command -v composer >/dev/null 2>&1; then
    echo -e "${GREEN}Composer is already installed.${NC}"
  else
    echo -e "${YELLOW}Installing Composer...${NC}"
    curl -sS https://getcomposer.org/installer | php
    mv composer.phar /usr/local/bin/composer
    chmod +x /usr/local/bin/composer
    log_action "SUCCESS" "Composer installed globally."
    echo -e "${GREEN}Composer has been installed globally.${NC}"
  fi

  echo -e "${YELLOW}Updating Composer...${NC}"
  composer self-update
  log_action "SUCCESS" "Composer updated."
  echo -e "${GREEN}Composer is up to date.${NC}"
}

install_pecl_package() {
  require_sudo
  local packages="$1"
  IFS=', ' read -ra package_list <<<"$packages"

  for package in "${package_list[@]}"; do
    echo -e "${YELLOW}Installing PECL package: $package...${NC}"
    safe_run pecl install "$package"
    log_action "SUCCESS" "$package installed successfully."
  done
}

serve() {
  local host="127.0.0.1"
  local port="8000"
  local root_dir
  root_dir=$(pwd)

  # Check for optional host, port, and root arguments
  while [[ "$1" ]]; do
    case $1 in
    --host)
      shift
      host="$1"
      ;;
    --port)
      shift
      port="$1"
      ;;
    --root)
      shift
      root_dir="$1"
      ;;
    --dry-run)
      dry_run=true
      ;;
    *)
      echo -e "${RED}Unknown argument: $1${NC}"
      return 1
      ;;
    esac
    shift
  done

  is_port_available "$port"
  echo -e "${YELLOW}Serving from $root_dir on $host:$port${NC}"
  php -S "$host:$port" -t "$root_dir"
}

is_port_available() {
  local port="$1"
  if lsof -i:"$port" &>/dev/null; then
    echo -e "${RED}Port $port is already in use. Please choose another port.${NC}"
    exit 1
  fi
}

run_php_script() {
  local version="$1"
  local script_path="$2"

  if [[ ! -f "$script_path" ]]; then
    echo -e "${RED}Error: Script file not found at $script_path.${NC}"
    exit 1
  fi

  if ! command -v "/usr/bin/php$version" &>/dev/null; then
    echo -e "${RED}PHP version $version is not installed.${NC}"
    exit 1
  fi

  echo -e "${YELLOW}Running script with PHP $version...${NC}"
  "/usr/bin/php$version" "$script_path"
}

display_usage() {
  echo -e "${GREEN}Usage: phpx {switch|ext|install|serve|run|remove} <php_version|composer|pecl_package|script_path>${NC}"
  echo
  echo -e "${YELLOW}Commands:${NC}"
  echo -e "  ${GREEN}switch|s <php_version>${NC}    Switch to a specified PHP version, installing it if not found."
  echo -e "                           Also installs PHP-FPM if required for Nginx or Lighttpd."
  echo
  echo -e "  ${GREEN}ext|extensions|x [php_version]${NC}       Show installed PHP extensions for a given version and allow the user to install new ones."
  echo -e "                           If no version is provided, the currently active PHP version is used."
  echo
  echo -e "  ${GREEN}install composer${NC}        Installs Composer globally if not already installed and runs composer self-update."
  echo
  echo -e "  ${GREEN}install <pecl_package>${NC}  Installs a PECL package (or multiple PECL packages separated by commas or spaces)."
  echo
  echo -e "  ${GREEN}serve${NC}                   Starts a PHP built-in web server from the current directory or specified root."
  echo -e "                           Options: --host=<host> --port=<port> --root=<root_dir> --dry-run"
  echo
  echo -e "  ${GREEN}run <php_version> <script_path>${NC}  Runs a PHP script using the specified PHP version."
  echo
  echo -e "  ${GREEN}remove <php_version>${NC}  Removes the specified PHP version, including PHP-CLI and PHP-FPM."
  echo -e "  ${GREEN}remove <php_version> <extension>${NC}  Removes a specified PHP extension for a given version."
  echo
  echo -e "${YELLOW}Examples:${NC}"
  echo -e "  ${GREEN}phpx switch 8.2${NC}         Switches to PHP 8.2, installs it if needed, and configures the web server."
  echo -e "  ${GREEN}phpx ext${NC}                Lists installed extensions for the currently active PHP version."
  echo -e "  ${GREEN}phpx install composer${NC}   Installs Composer globally and updates it."
  echo -e "  ${GREEN}phpx install xdebug,redis${NC}  Installs multiple PECL packages (xdebug and redis)."
  echo -e "  ${GREEN}phpx serve --host=192.168.0.1 --port=8080${NC}  Serves from the current directory at the specified host and port."
  echo -e "  ${GREEN}phpx run 8.2 my_script.php${NC}  Runs the specified PHP script using PHP version 8.2."
}

remove_php_version() {
  require_sudo
  local version="$1"
  validate_php_version "$version"

  echo -e "${YELLOW}Removing PHP $version...${NC}"
  safe_run apt purge -y "php$version" "php$version-cli" "php$version-fpm"
  log_action "SUCCESS" "Removed PHP $version, PHP-CLI, and PHP-FPM."
}

remove_php_extension() {
  require_sudo
  local version="$1"
  local extension="$2"

  if [[ -z "$version" || -z "$extension" ]]; then
    echo -e "${RED}Please provide both PHP version and extension to remove.${NC}"
    exit 1
  fi

  echo -e "${YELLOW}Removing PHP extension $extension for PHP $version...${NC}"
  safe_run apt purge -y "php$version-$extension"
  log_action "SUCCESS" "Removed PHP extension $extension for PHP $version."
}

perform_system_checks() {
  echo -e "${YELLOW}Performing system checks...${NC}"
  if ! ping -c 1 google.com &>/dev/null; then
    echo -e "${RED}No internet connection detected. Please check your network.${NC}"
    exit 1
  fi
  local free_space
  free_space=$(df / | tail -1 | awk '{print $4}')
  if (( free_space < 50000 )); then
    echo -e "${RED}Insufficient disk space. At least 50MB free space is required.${NC}"
    exit 1
  fi
}

perform_system_checks

case "$1" in
switch | s)
  switch_php_version "$2"
  ;;
ext | extensions | x)
  install_php_extensions "$2"
  ;;
install | i)
  case "$2" in
  composer)
    install_composer
    ;;
  *)
    install_pecl_package "$2"
    ;;
  esac
  ;;
serve)
  serve "$@"
  ;;
run)
  run_php_script "$2" "$3"
  ;;
remove)
  if [[ -n "$2" && -n "$3" ]]; then
    remove_php_extension "$2" "$3"
  elif [[ -n "$2" ]]; then
    remove_php_version "$2"
  else
    echo -e "${RED}Invalid usage. See help for details.${NC}"
    display_usage
    exit 1
  fi
  ;;
*)
  display_usage
  ;;
esac
