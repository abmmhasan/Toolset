#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

setup_logging() {
  local LOG_DIR="/var/log/phpx"
  local USER_LOG_DIR="$HOME/.local/phpx_logs"
  LOG_FILE=""

  if [[ "$EUID" -eq 0 ]]; then
    if [[ ! -d "$LOG_DIR" ]]; then
      mkdir -p "$LOG_DIR"
      chmod 755 "$LOG_DIR"
      chown root:root "$LOG_DIR"
    fi
    LOG_FILE="$LOG_DIR/$(date +'%Y-%m-%d').log"
  else
    if [[ ! -d "$USER_LOG_DIR" ]]; then
      mkdir -p "$USER_LOG_DIR"
    fi
    LOG_FILE="$USER_LOG_DIR/$(date +'%Y-%m-%d').log"
    echo -e "${YELLOW}Sudoless logs will be stored in $USER_LOG_DIR.${NC}"
  fi

  # Ensure the log file can be created/written to
  touch "$LOG_FILE" 2>/dev/null
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}Permission denied: Unable to write to $LOG_FILE.${NC}"
    exit 1
  fi
}

require_sudo() {
  if [[ "$EUID" -ne 0 ]]; then
    echo -e "${RED}Please run the script with sudo.${NC}"
    log_action "ERROR" "Script not run with sudo."
    exit 1  # Exit code 1: General error
  fi
}

log_action() {
  local level="$1"
  local message="$2"
  local current_time
  current_time=$(date +'%Y-%m-%d %H:%M:%S')
  echo "$current_time - [$level] - $message" >>"$LOG_FILE"
}

validate_php_version() {
  local version="$1"
  if ! [[ "$version" =~ ^[0-9]+\.[0-9]+$ ]]; then
    echo -e "${RED}Invalid PHP version format. Expected format: X.Y (e.g., 8.2).${NC}"
    log_action "ERROR" "Invalid PHP version format: $version"
    exit 2
  fi
}

add_sury_repo_if_needed() {
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
  else
    echo -e "${RED}Cannot determine the operating system.${NC}"
    log_action "ERROR" "Cannot determine the operating system."
    exit 1
  fi

  if [ "$OS" == "ubuntu" ]; then
    if ! grep -q "^deb .*ondrej/php" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
      echo -e "${YELLOW}Adding the Sury PPA for Ubuntu.${NC}"
      log_action "INFO" "Adding the Sury PPA for Ubuntu."
      add-apt-repository ppa:ondrej/php
      apt update
    fi
  elif [ "$OS" == "debian" ] || [ -n "$(grep -i 'debian' /etc/os-release)" ]; then
    if ! grep -q "^deb .*packages.sury.org/php" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
      echo -e "${YELLOW}Adding the Sury PPA for Debian.${NC}"
      log_action "INFO" "Adding the Sury PPA for Debian."
      apt update
      apt -y install lsb-release ca-certificates curl
      curl -sSLo /tmp/debsuryorg-archive-keyring.deb https://packages.sury.org/debsuryorg-archive-keyring.deb
      dpkg -i /tmp/debsuryorg-archive-keyring.deb
      sh -c 'echo "deb [signed-by=/usr/share/keyrings/deb.sury.org-php.gpg] https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list'
      apt update
    fi
  else
    echo -e "${RED}Unsupported OS for this script.${NC}"
    log_action "ERROR" "Unsupported OS: $OS"
    exit 3
  fi
}

install_php_version() {
  local version="$1"
  validate_php_version "$version"
  local packages_to_install=()

  # Check if PHP, PHP-CLI, and PHP-FPM are already installed
  for package in "php$version" "php$version-cli" "php$version-fpm"; do
    if ! dpkg -l | grep -q "^ii  $package "; then
      packages_to_install+=("$package")
    fi
  done

  # If any packages are missing, install them
  if [[ ${#packages_to_install[@]} -gt 0 ]]; then
    echo -e "${YELLOW}Installing missing PHP $version packages: ${packages_to_install[*]}...${NC}"
    log_action "INFO" "Installing PHP $version packages: ${packages_to_install[*]}."
    apt install -y "${packages_to_install[@]}"
    log_action "INFO" "Installed PHP $version packages: ${packages_to_install[*]}."
  fi
}

configure_web_server() {
  local version="$1"
  declare -A servers=(["apache2"]="Apache" ["nginx"]="Nginx" ["lighttpd"]="Lighttpd")
  local available_servers=()
  local service

  for service in "${!servers[@]}"; do
    if systemctl status "$service" &>/dev/null; then
      available_servers+=("$service")
    fi
  done

  if [[ ${#available_servers[@]} -eq 0 ]]; then
    echo -e "${YELLOW}No supported web servers (Apache, Nginx, Lighttpd) detected.${NC}"
    log_action "WARN" "No supported web servers detected."
    return 0
  fi

  echo -e "${YELLOW}Detected web servers:${NC}"
  local i
  for i in "${!available_servers[@]}"; do
    echo "$((i + 1)). ${servers[${available_servers[$i]}]}"
  done

  read -rp "Select a web server to configure with PHP $version (enter number): " server_selection
  while ! [[ "$server_selection" =~ ^[0-9]+$ && "$server_selection" -ge 1 && "$server_selection" -le ${#available_servers[@]} ]]; do
    echo -e "${RED}Invalid selection. Please enter a number between 1 and ${#available_servers[@]}.${NC}"
    read -rp "Select a web server to configure with PHP $version (enter number): " server_selection
  done
  local selected_server="${available_servers[$((server_selection - 1))]}"

  case "$selected_server" in
  apache2)
    if systemctl status php$version-fpm &>/dev/null; then
      echo -e "${YELLOW}Apache is using PHP-FPM...${NC}"
      log_action "INFO" "Apache is using PHP-FPM for PHP $version."
      a2enconf "php$version-fpm"
      systemctl restart apache2
    else
      echo -e "${YELLOW}Apache is not using PHP-FPM.${NC}"
      log_action "INFO" "Apache is not using PHP-FPM for PHP $version."
      a2dismod "php$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')"
      a2enmod "php$version"
      systemctl restart apache2
    fi

    local apache_needs_restart=false
    if apache2ctl -M | grep -q "proxy_fcgi"; then
      echo -e "${YELLOW}Apache is configured to use PHP-FPM (Update SetHandler afterwards, if necessary)${NC}"
      log_action "INFO" "Apache is configured to use PHP-FPM."
      local current_fpm_conf=$(ls /etc/apache2/conf-enabled/php*-fpm.conf 2>/dev/null | awk -F'/' '{print $5}' | sed 's/.conf//')
      if [ -n "$current_fpm_conf" ]; then
        a2disconf "$current_fpm_conf"
        apache_needs_restart=true
      fi
      if [ -f "/etc/apache2/conf-available/php$version-fpm.conf" ]; then
        a2enconf "php$version-fpm"
        apache_needs_restart=true
      fi
    else
      echo -e "${YELLOW}Apache is not using PHP-FPM.${NC}"
      log_action "INFO" "Apache is not using PHP-FPM for PHP $version."
      local current_php_version=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')
      a2dismod "php$current_php_version"
      a2enmod "php$version"
      apache_needs_restart=true
    fi
    if [ "$apache_needs_restart" = true ]; then
      echo -e "${YELLOW}Restarting Apache...${NC}"
      log_action "INFO" "Restarting Apache."
      systemctl restart apache2
    fi
    ;;
  nginx | lighttpd)
    echo -e "${YELLOW}Configure $selected_server to use PHP-FPM:${NC}"
    echo -e "Update your config to point to: /run/php/php$version-fpm.sock"
    log_action "INFO" "Configured $selected_server to use PHP-FPM for PHP $version."
    ;;
  esac
}

switch_php_version() {
  require_sudo
  local version="$1"
  if ! command -v "/usr/bin/php$version" &>/dev/null; then
    echo -e "${YELLOW}PHP $version is not installed.${NC}"
    log_action "INFO" "PHP $version is not installed."
    install_php_version "$version"
  fi

  # Set PHP version using update-alternatives
  update-alternatives --set php "/usr/bin/php$version" > /dev/null
  update-alternatives --set phar "/usr/bin/phar$version" > /dev/null
  update-alternatives --set phar.phar "/usr/bin/phar.phar$version" > /dev/null
  echo -e "${GREEN}Switched PHP to version $version.${NC}"
  log_action "INFO" "Switched to PHP version $version."
  configure_web_server "$version"
}

install_php_extensions() {
  require_sudo
  local version="$1"

  # Auto-detect the currently active PHP version if no version is provided
  if [[ -z "$version" ]]; then
    version=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')
    echo -e "${YELLOW}No PHP version provided. Using detected PHP version: $version${NC}"
    log_action "INFO" "Detected PHP version: $version."
  fi

  echo -e "${YELLOW}Fetching installed PHP extensions for PHP $version...${NC}"
  log_action "INFO" "Fetching installed PHP extensions for PHP $version."
  local installed_extensions=($(dpkg -l | grep "^ii" | grep "php$version-" | awk '{print $2}' | sed "s/php$version-//g" | sort))

  if [[ ${#installed_extensions[@]} -eq 0 ]]; then
    echo -e "${RED}No PHP extensions are installed for PHP $version.${NC}"
    log_action "WARN" "No PHP extensions installed for PHP $version."
  else
    echo -e "${GREEN}Installed PHP extensions for PHP $version:${NC}"
    for i in "${!installed_extensions[@]}"; do
      printf "%2d. %-20s" $((i + 1)) "${installed_extensions[$i]}"
      if (((i + 1) % 5 == 0)); then
        echo ""
      fi
    done
    echo ""
  fi

  echo -e "${YELLOW}Fetching installable PHP extensions for PHP $version...${NC}"
  log_action "INFO" "Fetching installable PHP extensions for PHP $version."
  local available_extensions=($(apt-cache pkgnames | grep "^php$version-" | sed "s/php$version-//g" | sort))

  echo "Installable PHP extensions for PHP $version:"
  for i in "${!available_extensions[@]}"; do
    printf "%2d. %-20s" $((i + 1)) "${available_extensions[$i]}"
    if (((i + 1) % 5 == 0)); then
      echo ""
    fi
  done
  echo ""

  read -rp "Enter the numbers or names of the extensions you want to install (comma-separated or range): " extension_selection
  IFS=',' read -ra selection_array <<<"$extension_selection"
  local extensions_to_install=""

  for selection in "${selection_array[@]}"; do
    # Check if the selection is a number
    if [[ "$selection" =~ ^[0-9]+$ && "$selection" -ge 1 && "$selection" -le ${#available_extensions[@]} ]]; then
      extensions_to_install+="php$version-${available_extensions[$((selection - 1))]} "
    else
      # Loop through available_extensions to find a match by name
      for ext in "${available_extensions[@]}"; do
        if [[ "$ext" == "$selection" ]]; then
          extensions_to_install+="php$version-$ext "
          break
        fi
      done
    fi
  done

  if [[ -n "$extensions_to_install" ]]; then
    echo -e "${YELLOW}Installing selected extensions...${NC}"
    log_action "INFO" "Installing extensions: $extensions_to_install."

    # Install all extensions in one command
    apt install -y "$extensions_to_install"

    log_action "INFO" "Installed extensions: $extensions_to_install for PHP $version."
    echo -e "${GREEN}Extensions installed for PHP $version: $extensions_to_install${NC}"
  fi
}

install_composer() {
  require_sudo
  if command -v composer >/dev/null 2>&1; then
    echo -e "${GREEN}Composer is already installed.${NC}"
    log_action "INFO" "Composer is already installed."
  else
    echo -e "${YELLOW}Installing Composer...${NC}"
    log_action "INFO" "Installing Composer."
    curl -sS https://getcomposer.org/installer | php
    mv composer.phar /usr/local/bin/composer
    chmod +x /usr/local/bin/composer
    log_action "INFO" "Composer installed globally."
    echo -e "${GREEN}Composer has been installed globally.${NC}"
  fi

  echo -e "${YELLOW}Updating Composer...${NC}"
  log_action "INFO" "Updating Composer."
  composer self-update
  log_action "INFO" "Composer updated."
  echo -e "${GREEN}Composer is up to date.${NC}"
}

install_pecl_package() {
  require_sudo
  local packages="$1"

  if [[ -z "$packages" ]]; then
    echo -e "${RED}No PECL packages specified. Please provide package names.${NC}"
    log_action "ERROR" "No PECL packages specified."
    return 1
  fi

  IFS=', ' read -ra package_list <<<"$packages"
  local package

  for package in "${package_list[@]}"; do
    echo -e "${YELLOW}Installing PECL package: $package...${NC}"
    log_action "INFO" "Installing PECL package: $package."
    if pecl list | grep -q "^$package\\s"; then
      echo -e "${GREEN}$package is already installed. Skipping...${NC}"
      log_action "INFO" "$package is already installed. Skipped installation."
    else
      if ! pecl install "$package"; then
        echo -e "${RED}Failed to install PECL package: $package.${NC}"
        log_action "ERROR" "Failed to install $package."
      else
        echo -e "${GREEN}$package installed successfully.${NC}"
        log_action "INFO" "$package installed successfully."
      fi
    fi
  done
}

serve() {
  local host="127.0.0.1"
  local port="8000"
  local root_dir
  local verbose=false
  local router_file=""
  root_dir=$(pwd)

  # Parse arguments
  while [[ "$1" ]]; do
    case $1 in
    --host)
      shift
      host="$1"
      ;;
    --port)
      shift
      port="$1"
      ;;
    --root)
      shift
      root_dir="$1"
      ;;
    --router)
      shift
      router_file="$1"
      ;;
    --verbose | -v)
      verbose=true
      ;;
    *)
      echo -e "${RED}Unknown argument: $1${NC}"
      return 1
      ;;
    esac
    shift
  done

  # Verbose logging function
  log() {
    if [[ "$verbose" == true ]]; then
      echo -e "$1"
    fi
  }

  # Check if the provided root directory exists
  if [[ ! -d "$root_dir" ]]; then
    echo -e "${RED}The root directory $root_dir does not exist.${NC}"
    log_action "ERROR" "Root directory $root_dir does not exist."
    return 1
  fi

  if lsof -i:"$port" >/dev/null; then
    echo -e "${RED}Port $1 is already in use.${NC}"
    log_action "ERROR" "Port $port is already in use."
    return 1
  fi

  # Check for common index files in prioritized directories
  local index_files=(
    "$root_dir/public/index.php"
    "$root_dir/public/index.html"
    "$root_dir/index.php"
    "$root_dir/index.html"
  )

  local found_root_dir=""

  for index_file in "${index_files[@]}"; do
    if [[ -f "$index_file" ]]; then
      found_root_dir=$(dirname "$index_file")
      log "${GREEN}Found index file in: $found_root_dir${NC}"
      break
    fi
  done

  # If no index file is found, use the provided root directory
  if [[ -z "$found_root_dir" ]]; then
    echo -e "${YELLOW}No index.php or index.html found, using provided root directory: $root_dir${NC}"
    log_action "INFO" "No index.php or index.html found. Using $root_dir."
    found_root_dir="$root_dir"
  fi

  # Log details if verbose is enabled
  log "${YELLOW}Root directory: $found_root_dir${NC}"
  log "${YELLOW}Serving on $host:$port${NC}"
  log_action "INFO" "Serving on $host:$port from $found_root_dir."

  # Check for custom router
  if [[ -n "$router_file" ]]; then
    if [[ ! -f "$router_file" ]]; then
      echo -e "${RED}The router file $router_file does not exist.${NC}"
      log_action "ERROR" "Router file $router_file does not exist."
      return 1
    else
      log "${YELLOW}Using custom router file: $router_file${NC}"
      log_action "INFO" "Serving with custom router: $router_file."
      php -S "$host:$port" -t "$found_root_dir" "$router_file"
    fi
  else
    # Serve without router if no custom router is provided
    log "${YELLOW}No custom router provided. Serving directly from $found_root_dir${NC}"
    log_action "INFO" "Serving directly from $found_root_dir."
    php -S "$host:$port" -t "$found_root_dir"
  fi
}

run_php_script() {
  local version="$2"
  local script_path="$1"

  if [[ ! -f "$script_path" ]]; then
    echo -e "${RED}Error: Script file not found at $script_path.${NC}"
    log_action "ERROR" "Script file not found at $script_path."
    exit 1
  fi

  if [[ -z "$version" ]]; then
    version=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')
  fi

  if ! command -v "/usr/bin/php$version" &>/dev/null; then
    echo -e "${RED}PHP version $version is not installed.${NC}"
    log_action "ERROR" "PHP version $version is not installed."
    exit 1
  fi

  echo -e "${YELLOW}Running script with PHP $version...${NC}"
  log_action "INFO" "Running script $script_path with PHP $version."
  "/usr/bin/php$version" "$script_path"
}

display_usage() {
  echo -e "${GREEN}Usage: phpx {switch|ext|install|serve|run|remove} <php_version|composer|pecl_package|script_path>${NC}"
  echo
  echo -e "${YELLOW}Commands:${NC}"
  echo -e "  ${GREEN}switch|s <php_version>${NC}    Switch to a specified PHP version, installing it if not found."
  echo -e "                           Also installs PHP-FPM if required for Nginx or Lighttpd."
  echo
  echo -e "  ${GREEN}ext|extensions|x [php_version]${NC}       Show installed PHP extensions for a given version and allow the user to install new ones."
  echo -e "                           If no version is provided, the currently active PHP version is used."
  echo
  echo -e "  ${GREEN}install|i composer${NC}        Installs Composer globally if not already installed."
  echo
  echo -e "  ${GREEN}install|i <pecl_package>${NC}  Installs a PECL package (or multiple PECL packages separated by commas or spaces)."
  echo
  echo -e "  ${GREEN}serve${NC}                   Starts a PHP built-in web server from the current directory or specified root."
  echo -e "                           Options: --host=<host> --port=<port> --root=<root_dir>"
  echo
  echo -e "  ${GREEN}run <script_path> [php_version]${NC}  Runs a PHP script using the specified or currently active PHP version."
  echo
  echo -e "  ${GREEN}remove <php_version>${NC}  Removes the specified PHP version, including PHP-CLI and PHP-FPM."
  echo -e "  ${GREEN}remove <php_version> <extension>${NC}  Removes a specified PHP extension for a given version."
  echo
  echo -e "  ${GREEN}sury${NC} Adds the Sury PPA for the currently installed operating system."
  echo
  echo -e "${YELLOW}Examples:${NC}"
  echo -e "  ${GREEN}phpx switch 8.2${NC}         Switches to PHP 8.2, installs it if needed, and configures the web server."
  echo -e "  ${GREEN}phpx ext${NC}                Lists installed extensions for the currently active PHP version."
  echo -e "  ${GREEN}phpx install composer${NC}   Installs Composer globally and updates it."
  echo -e "  ${GREEN}phpx install xdebug,redis${NC}  Installs multiple PECL packages (xdebug and redis)."
  echo -e "  ${GREEN}phpx serve --host=192.168.0.1 --port=8080${NC}  Serves from the current directory at the specified host and port."
  echo -e "  ${GREEN}phpx run 8.2 my_script.php${NC}  Runs the specified PHP script using PHP version 8.2."
}

remove_php_version() {
  require_sudo
  local version="$1"
  validate_php_version "$version"

  echo -e "${YELLOW}Removing PHP $version...${NC}"
  log_action "INFO" "Removing PHP $version."
  apt purge -y "php$version" "php$version-cli" "php$version-fpm"
  log_action "INFO" "Removed PHP $version, PHP-CLI, and PHP-FPM."
}

remove_php_extension() {
  require_sudo
  local version="$1"
  local extension="$2"

  if [[ -z "$version" || -z "$extension" ]]; then
    echo -e "${RED}Please provide both PHP version and extension to remove.${NC}"
    log_action "ERROR" "Missing PHP version or extension for removal."
    exit 1
  fi

  echo -e "${YELLOW}Removing PHP extension $extension for PHP $version...${NC}"
  log_action "INFO" "Removing PHP extension $extension for PHP $version."
  apt purge -y "php$version-$extension"
  log_action "INFO" "Removed PHP extension $extension for PHP $version."
}

perform_system_checks() {
  log_action "INFO" "Performing system checks."
  if ! ping -c 1 google.com &>/dev/null; then
    echo -e "${RED}No internet connection detected. Please check your network.${NC}"
    log_action "ERROR" "No internet connection detected."
    exit 4
  fi
  local free_space
  free_space=$(df / | tail -1 | awk '{print $4}')
  if ((free_space < 50000)); then
    echo -e "${RED}Insufficient disk space. At least 50MB free space is required.${NC}"
    log_action "ERROR" "Insufficient disk space. At least 50MB required."
    exit 5
  fi
  if ! command -v curl &>/dev/null || ! command -v wget &>/dev/null; then
    echo -e "${RED}Missing required tools: curl, wget. Please install them and try again.${NC}"
    log_action "ERROR" "Missing required tools: curl, wget."
    exit 3
  fi
}

trap "echo -e '${RED}Process interrupted. Exiting.${NC}'; log_action 'ERROR' 'Process interrupted by user'; exit 6" SIGINT SIGTERM

setup_logging
perform_system_checks

case "$1" in
switch | s)
  switch_php_version "$2"
  ;;
ext | extensions | x)
  install_php_extensions "$2"
  ;;
install | i)
  case "$2" in
  composer)
    install_composer
    ;;
  *)
    install_pecl_package "$2"
    ;;
  esac
  ;;
serve)
  serve "$@"
  ;;
run)
  run_php_script "$2" "$3"
  ;;
remove)
  if [[ -n "$2" && -n "$3" ]]; then
    remove_php_extension "$2" "$3"
  elif [[ -n "$2" ]]; then
    remove_php_version "$2"
  else
    echo -e "${RED}Invalid usage. See help for details.${NC}"
    display_usage
    exit 1
  fi
  ;;
sury)
  add_sury_repo_if_needed
  ;;
*)
  display_usage
  ;;
esac
