#!/bin/bash

# Helper function for displaying usage
usage() {
  echo "Usage: gitx <command> [options]"
  echo "Commands:"
  echo "  unstage                                          Unstage all files"
  echo "  amend                                            Amend the last commit message"
  echo "  add-remote                                       Add a new remote repository"
  echo "  push-remote                                      Push to a specific remote branch"
  echo "  pull-remote                                      Pull from a specific remote branch"
  echo "  stage-deleted                                    Stage all deleted files"
  echo "  stage-deleted-dir                                Stage deleted files in a directory"
  echo "  initial-commit                                   Get the initial commit hash"
  echo "  latest-tag                                       Get the latest tag in the repository"
  echo "  changelog                                        Generate a changelog between commits or tags"
  echo "  count-changes                                    Count changes between two commits"
  echo "  list-changes                                     List files changed between branches"
  echo "  set-lf                                           Set Git to use LF line endings"
  echo "  prune                                            Prune remote branches and delete local branches tracking them"
  echo "  reset-branch                                     Reset current branch to remote state"
  echo "  report <start_commit> [end_commit] [output_file] Generate PR and commit report"
  echo "  diff [output_file]                               Track changes in staged files"
  echo "  stash                                            Manage stash operations"
  echo "  compare                                          Compare two branches"
  echo "  config                                           Edit Git configuration"
  echo "  create <branch_type> <name>                      Create a new branch"
  echo "  sync                                             Sync alpha and develop with master/main"
  echo "  merge <source_branch> <target_branch>           Merge branches"
  echo "  tag <version>                                    Tag the current branch with a version"
  echo "  cleanup                                          Delete merged branches"
  echo "  summarize                                        Summarize repository details"
  echo "  clean                                            Clean untracked files and directories"
  echo "  status                                           Show the current repository status"
  echo "  commit                                           Interactive commit helper"
  echo "  cherry-pick                                      Cherry-pick a specific commit"
  echo "  large-files                                      Show the largest files in the repository"
  exit 1
}

# Unstage all files
unstage_all() {
  ensure_git_repo
  echo "Unstaging all files..."
  git reset
  echo "All files have been unstaged."
}

# Amend the last commit message
amend_commit_message() {
  ensure_git_repo
  read -rp "Enter the new commit message: " new_message
  git commit --amend -m "$new_message"
  echo "Commit message amended to: $new_message"
}

# Add a new remote repository
add_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (e.g., origin): " remote_name
  read -rp "Enter the remote URL: " remote_url
  git remote add "$remote_name" "$remote_url"
  echo "Remote '$remote_name' added with URL '$remote_url'."
}

# Push to a specific remote branch
push_to_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (e.g., origin): " remote_name
  read -rp "Enter the branch name to push: " branch_name
  git push "$remote_name" "$branch_name"
  echo "Pushed branch '$branch_name' to remote '$remote_name'."
}

# Pull from a specific remote branch
pull_from_remote() {
  ensure_git_repo
  read -rp "Enter the remote name (e.g., origin): " remote_name
  read -rp "Enter the branch name to pull: " branch_name
  git pull "$remote_name" "$branch_name"
  echo "Pulled branch '$branch_name' from remote '$remote_name'."
}

# Stage all deleted files
stage_deleted_files() {
  ensure_git_repo
  echo "Staging deleted files..."
  git ls-files --deleted | xargs git add
  echo "Deleted files have been staged."
}

# Stage deleted files in a specific directory
stage_deleted_in_directory() {
  ensure_git_repo
  read -rp "Enter the directory path: " dir_path
  if [[ -d "$dir_path" ]]; then
    echo "Staging deleted files in $dir_path..."
    git ls-files --deleted "$dir_path" | xargs git add
    echo "Deleted files in $dir_path have been staged."
  else
    echo "Directory '$dir_path' does not exist."
  fi
}

# Get the initial commit hash
get_initial_commit() {
  ensure_git_repo
  initial_commit=$(git rev-list --max-parents=0 HEAD)
  echo "Initial Commit: $initial_commit"
}

# Get the latest tag in the repository
get_latest_tag() {
  ensure_git_repo
  latest_tag=$(git describe --tags --abbrev=0)
  echo "Latest Tag: $latest_tag"
}

# Generate a changelog between two commits or tags
generate_changelog() {
  ensure_git_repo
  read -rp "Enter the start commit or tag: " start_ref
  read -rp "Enter the end commit or tag (default: HEAD): " end_ref
  end_ref=${end_ref:-HEAD}
  changelog_file="changelog_${start_ref}_to_${end_ref}.txt"
  git log "$start_ref..$end_ref" --pretty=format:"%h - %s (%an, %ad)" --date=short >"$changelog_file"
  echo "Changelog saved to $changelog_file."
}

# Count changes between two commits
count_changes_between_commits() {
  ensure_git_repo
  read -rp "Enter the start commit: " start_commit
  read -rp "Enter the end commit (default: HEAD): " end_commit
  end_commit=${end_commit:-HEAD}
  changes_count=$(git diff --shortstat "$start_commit" "$end_commit" | awk '{print $1, $2, $3}')
  echo "Changes between $start_commit and $end_commit: $changes_count"
}

# List files changed between two branches
list_changed_files_between_branches() {
  ensure_git_repo
  read -rp "Enter the first branch: " branch1
  read -rp "Enter the second branch: " branch2
  echo "Files changed between $branch1 and $branch2:"
  git diff --name-only "$branch1" "$branch2"
}

# Set Git to use LF line endings
set_line_endings_to_lf() {
  ensure_git_repo
  git config --global core.autocrlf false
  echo "Configured Git to use LF line endings."
}

# Ensure Git repository
ensure_git_repo() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Error: Not inside a Git repository."
    exit 1
  fi
}

# Detect master/main branch
detect_main_branch() {
  if git symbolic-ref refs/remotes/origin/HEAD &>/dev/null; then
    git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
  elif git branch -r | grep -q "origin/main"; then
    echo "main"
  elif git branch -r | grep -q "origin/trunk"; then
    echo "trunk"
  else
    echo "master"
  fi
}

# Create a new branch from master/main
create_branch() {
  local branch_type=$1
  local name=$2
  ensure_git_repo
  local main_branch
  main_branch=$(detect_main_branch)
  git checkout "$main_branch" || exit
  git pull origin "$main_branch" || exit
  local branch_name="${branch_type}/${name}"
  git checkout -b "$branch_name" || exit
  git push origin "$branch_name"
  echo "Branch created: $branch_name"
}

# Sync alpha and develop with master/main
sync_branches() {
  ensure_git_repo
  local main_branch
  main_branch=$(detect_main_branch)
  git checkout "$main_branch" || exit
  git pull origin "$main_branch" || exit

  local branches=("alpha" "develop")
  read -rp "Do you want to sync additional branches? (y/n): " sync_more
  if [[ "$sync_more" == "y" ]]; then
    read -rp "Enter the branches to sync (comma-separated): " additional_branches
    IFS=',' read -r -a user_branches <<<"$additional_branches"
    branches+=("${user_branches[@]}")
  fi

  for branch in "${branches[@]}"; do
    if git show-ref --verify --quiet "refs/heads/$branch"; then
      git checkout "$branch" || exit
    else
      git checkout -b "$branch" || exit
    fi
    git merge "$main_branch" || exit
    git push origin "$branch" || exit
    echo "Synced $branch with $main_branch."
  done
}

# Merge branches
merge_branch() {
  local source=$1
  local target=$2
  ensure_git_repo

  echo "Switching to branch $target..."
  git checkout "$target" || exit
  git pull origin "$target" || exit

  echo "Merging $source into $target..."
  git merge --no-ff "$source" || {
    echo "Merge conflicts detected. Resolve conflicts and continue or abort the merge."
    echo "Run 'git merge --abort' to cancel the merge."
    exit 1
  }

  git push origin "$target" || exit
  echo "Successfully merged $source into $target."
}

# Tag a release
tag_release() {
  local version=$1
  ensure_git_repo

  if [[ -z "$version" ]]; then
    echo "Error: Version is required for tagging."
    exit 1
  fi

  if git rev-parse "refs/tags/$version" >/dev/null 2>&1; then
    echo "Error: Tag '$version' already exists."
    exit 1
  fi

  git tag -a "$version" -m "Release $version" || exit
  git push origin "$version" || exit
  echo "Tagged release: $version"
}

# Cleanup merged branches
cleanup_branches() {
  ensure_git_repo
  echo "Branches merged into the main branch:"
  git branch --merged | grep -vE "(^\*|master|main|develop|alpha)"

  read -rp "Do you want to preview only (dry-run)? (y/n): " dry_run
  if [[ "$dry_run" == "y" ]]; then
    echo "Dry run complete. No branches were deleted."
    return
  fi

  git branch --merged | grep -vE "(^\*|master|main|develop|alpha)" | while read branch; do
    read -rp "Do you want to delete branch '$branch'? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
      git branch -d "$branch" || exit
      git push origin --delete "$branch" || exit
      echo "Deleted branch: $branch"
    else
      echo "Skipped branch: $branch"
    fi
  done
}

# Fetch PRs, Non-PR Merges, and Standalone Commits
fetch_prs_and_commits() {
  local start_commit="$1"
  local end_commit="${2:-HEAD}" # Default to HEAD if not provided
  local output_file="${3:-pr_report_${start_commit}_to_${end_commit}.txt}"

  if [[ -z "$start_commit" ]]; then
    echo "Start commit is required."
    read -rp "Enter the start commit hash: " start_commit
  fi

  local commit_range="${start_commit}..${end_commit}"

  echo "Generating report for commits in range: $commit_range"
  echo "Saving output to: $output_file"

  echo "PRs, Non-PR Merges, and Standalone Commits Report" >"$output_file"
  echo "" >>"$output_file"

  # PRs
  echo "1. PRs:" >>"$output_file"
  echo "" >>"$output_file"
  git log --merges --pretty=format:"%h|%s|%b|%an|%ae|%ad" "$commit_range" | grep "Merge pull request" | while IFS= read -r merge_commit; do
    local merge_hash=$(echo "$merge_commit" | cut -d'|' -f1)
    local pr_details=$(echo "$merge_commit" | cut -d'|' -f2-)
    echo "Merge Commit: $merge_hash | $pr_details" >>"$output_file"
    echo "  Commits in this PR:" >>"$output_file"
    git log "${merge_hash}^1..${merge_hash}" --no-merges --pretty=format:"    %h|%s|%b|%an|%ae|%ad" >>"$output_file"
    echo "" >>"$output_file"
  done

  # Non-PR Merges
  echo "2. Non-PR Merges:" >>"$output_file"
  echo "" >>"$output_file"
  git log --merges --pretty=format:"%h|%s|%b|%an|%ae|%ad" "$commit_range" | grep -v "Merge pull request" | while IFS= read -r merge_commit; do
    local merge_hash=$(echo "$merge_commit" | cut -d'|' -f1)
    local merge_details=$(echo "$merge_commit" | cut -d'|' -f2-)
    echo "Merge Commit: $merge_hash | $merge_details" >>"$output_file"
    echo "  Commits in this Merge:" >>"$output_file"
    git log "${merge_hash}^1..${merge_hash}" --no-merges --pretty=format:"    %h|%s|%b|%an|%ae|%ad" >>"$output_file"
    echo "" >>"$output_file"
  done

  # Standalone Commits
  echo "3. Standalone Commits:" >>"$output_file"
  echo "" >>"$output_file"
  local all_commits=$(git log --no-merges --pretty=format:"%h" "$commit_range")
  local merge_commits=$(git log --merges --pretty=format:"%h" "$commit_range" | while IFS= read -r merge_commit; do
    git log "${merge_commit}^1..${merge_commit}" --no-merges --pretty=format:"%h"
  done)
  local standalone_commits=$(comm -23 <(echo "$all_commits" | sort) <(echo "$merge_commits" | sort))
  for commit in $standalone_commits; do
    local commit_details=$(git log -n 1 --pretty=format:"%h|%s|%b|%an|%ae|%ad" "$commit")
    echo "$commit_details" >>"$output_file"
  done

  echo "" >>"$output_file"
  echo "Report generated in $output_file"
}

# Unified stash operations
stash_operations() {
  echo "Choose an operation:"
  echo "1. Save current changes to stash"
  echo "2. List existing stashes"
  echo "3. Apply a stash"
  echo "4. Pop (apply and drop) a stash"
  echo "5. Drop a stash"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    local branch_name=$(git rev-parse --abbrev-ref HEAD)
    local timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
    local stash_name="Stash on $branch_name @ $timestamp"
    git stash save "$stash_name"
    echo "Changes stashed as: $stash_name"
    ;;
  2)
    echo "Available Stashes:"
    git stash list | nl -w2 -s". "
    ;;
  3)
    git stash list | nl -w2 -s". "
    read -rp "Enter the stash number to apply: " stash_number
    local stash_ref=$(git stash list | sed -n "${stash_number}p" | awk '{print $1}')
    [[ -n "$stash_ref" ]] && git stash apply "$stash_ref" && echo "Applied stash: $stash_ref"
    ;;
  4)
    git stash list | nl -w2 -s". "
    read -rp "Enter the stash number to pop: " stash_number
    local stash_ref=$(git stash list | sed -n "${stash_number}p" | awk '{print $1}')
    [[ -n "$stash_ref" ]] && git stash pop "$stash_ref" && echo "Popped stash: $stash_ref"
    ;;
  5)
    git stash list | nl -w2 -s". "
    read -rp "Enter the stash number to drop: " stash_number
    local stash_ref=$(git stash list | sed -n "${stash_number}p" | awk '{print $1}')
    [[ -n "$stash_ref" ]] && git stash drop "$stash_ref" && echo "Dropped stash: $stash_ref"
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

# Compare branches
compare_branches() {
  read -rp "Enter the first branch to compare: " branch1
  read -rp "Enter the second branch to compare: " branch2

  echo "Choose comparison type:"
  echo "1. Commits unique to each branch"
  echo "2. List files changed between branches"
  echo "3. Show detailed diffs"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    echo "Commits in $branch2 but not in $branch1:"
    git log "$branch1".."$branch2" --oneline
    echo ""
    echo "Commits in $branch1 but not in $branch2:"
    git log "$branch2".."$branch1" --oneline
    ;;
  2)
    echo "Files changed between $branch1 and $branch2:"
    git diff --name-only "$branch1".."$branch2"
    ;;
  3)
    echo "Detailed diffs between $branch1 and $branch2:"
    git diff "$branch1".."$branch2"
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

# Git configuration editor
edit_git_config() {
  echo "Current Git Configuration:"
  git config --list
  echo "Options:"
  echo "1. Add/Edit a key"
  echo "2. Remove a key"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    read -rp "Enter the key you want to add/edit: " key
    if [[ -n "$key" ]]; then
      read -rp "Enter the new value for $key: " value
      git config --global "$key" "$value"
      echo "Updated $key to $value globally."
    else
      echo "No changes made."
    fi
    ;;
  2)
    read -rp "Enter the key you want to remove: " key
    if [[ -n "$key" ]]; then
      git config --global --unset "$key"
      echo "Removed key: $key"
    else
      echo "No changes made."
    fi
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

summarize_repo() {
  ensure_git_repo
  echo "Repository Summary:"
  echo "===================="
  echo "Current Branch: $(git rev-parse --abbrev-ref HEAD)"
  echo "Latest Commit: $(git log -1 --pretty=format:'%h - %s (%an, %ad)' --date=short)"
  echo "Total Commits: $(git rev-list --count HEAD)"
  echo "Number of Tags: $(git tag | wc -l)"
  echo "Number of Stashes: $(git stash list | wc -l)"
  echo "Repository Size: $(du -sh .git | awk '{print $1}')"
  echo "Remotes:"
  git remote -v | awk '{print "  - " $1 " -> " $2}' | sort | uniq
  echo "Branches:"
  git branch -a
  echo ""
  echo "Contributors:"
  git shortlog -sne | awk '{printf "%s %s (%s commits)\n", $2, $3, $1}'
  echo ""
}

track_staged_changes() {
  local diff_file="${1:-diffs.txt}"

  ensure_git_repo
  echo "Choose an action:"
  echo "1. Save staged changes to a file"
  echo "2. View staged changes inline"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    if [[ -f "$diff_file" ]]; then
      read -rp "File $diff_file already exists. Overwrite? (y/n): " overwrite
      if [[ "$overwrite" != "y" ]]; then
        echo "Aborting save operation."
        return
      fi
    fi
    git --no-pager diff --cached >"$diff_file"
    if [[ -s "$diff_file" ]]; then
      echo "Staged changes saved to $diff_file"
    else
      echo "No changes are currently staged."
    fi
    ;;
  2)
    git --no-pager diff --cached
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

cherry_pick_commit() {
  ensure_git_repo
  echo "Recent Commit History:"
  git log --oneline | nl -w2 -s". " | tee /tmp/git_log.txt

  read -rp "Enter the numbers of the commits to cherry-pick (comma-separated): " commit_numbers
  commit_hashes=$(echo "$commit_numbers" | tr ',' '\n' | while read -r num; do
    sed -n "${num}p" /tmp/git_log.txt | awk '{print $2}'
  done)

  if [[ -z "$commit_hashes" ]]; then
    echo "No valid commits selected. Exiting."
    return
  fi

  for commit in $commit_hashes; do
    git cherry-pick "$commit" || {
      echo "Conflict detected during cherry-pick of $commit."
      read -rp "Do you want to resolve conflicts manually or abort? (resolve/abort): " action
      if [[ "$action" == "abort" ]]; then
        git cherry-pick --abort
        echo "Cherry-pick aborted."
        return
      fi
    }
    echo "Cherry-picked commit: $commit"
  done
}

clean_untracked() {
  ensure_git_repo

  echo "Choose an action:"
  echo "1. Preview untracked files and directories (dry-run)"
  echo "2. Clean untracked files and directories"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    echo "Preview of untracked files and directories:"
    git clean -fdn
    ;;
  2)
    echo "This action will permanently delete untracked files and directories."
    read -rp "Are you sure you want to proceed? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
      git clean -fd
      echo "Untracked files and directories cleaned."
    else
      echo "Operation canceled."
    fi
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

show_large_files() {
  ensure_git_repo

  read -rp "How many large files do you want to display? (default 10): " count
  count=${count:-10}

  echo "Choose an action:"
  echo "1. Display results inline"
  echo "2. Save results to a file"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    echo "Top $count largest files in the repository:"
    git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' |
      sed -n 's/^.*blob //p' | sort -k2 -n -r | head -"$count" | awk '{print $2 " (" $1 " bytes)"}'
    ;;
  2)
    read -rp "Enter the output file name (default: large_files.txt): " output_file
    output_file=${output_file:-large_files.txt}
    git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' |
      sed -n 's/^.*blob //p' | sort -k2 -n -r | head -"$count" | awk '{print $2 " (" $1 " bytes)"}' >"$output_file"
    echo "Results saved to $output_file"
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}

fetch_and_prune() {
  ensure_git_repo
  echo "Fetching remote branches and pruning stale references..."
  git fetch --prune
  echo "Done."
}
file_log() {
  ensure_git_repo
  read -rp "Enter the file path to view its history: " file_path

  if [[ -f "$file_path" ]]; then
    echo "Choose an action:"
    echo "1. View commit history of the file"
    echo "2. View diffs for commits affecting the file"
    read -rp "Enter your choice: " choice

    case $choice in
    1)
      echo "Commit history for $file_path:"
      git log --follow -- "$file_path"
      ;;
    2)
      echo "Diffs for commits affecting $file_path:"
      git log --follow -p -- "$file_path"
      ;;
    *)
      echo "Invalid choice."
      ;;
    esac

    total_commits=$(git log --follow -- "$file_path" | grep -c '^commit')
    echo "Total commits affecting $file_path: $total_commits"
  else
    echo "File does not exist in the repository."
  fi
}

revert_commit() {
  ensure_git_repo
  echo "Recent Commit History:"
  git log --oneline | nl -w2 -s". " | tee /tmp/git_log.txt

  read -rp "Enter the numbers of the commits to revert (comma-separated): " commit_numbers
  commit_hashes=$(echo "$commit_numbers" | tr ',' '\n' | while read -r num; do
    sed -n "${num}p" /tmp/git_log.txt | awk '{print $2}'
  done)

  if [[ -z "$commit_hashes" ]]; then
    echo "No valid commits selected. Exiting."
    return
  fi

  echo "Choose an action:"
  echo "1. Create revert commits for each selected commit"
  echo "2. Revert and amend the last commit"
  read -rp "Enter your choice: " choice

  case $choice in
  1)
    for commit in $commit_hashes; do
      git revert "$commit" || {
        echo "Conflict detected while reverting $commit. Resolve conflicts manually or abort the revert."
        exit 1
      }
      echo "Reverted commit: $commit"
    done
    ;;
  2)
    for commit in $commit_hashes; do
      git revert --no-commit "$commit"
    done
    git commit --amend -m "Amended revert: $(git log -1 --pretty=%B)"
    echo "Reverted commits and amended the last commit."
    ;;
  *)
    echo "Invalid choice."
    ;;
  esac
}
reset_branch_to_remote() {
  ensure_git_repo
  local branch
  branch=$(git rev-parse --abbrev-ref HEAD)

  if ! git ls-remote --exit-code origin "$branch" &>/dev/null; then
    echo "Error: Remote branch '$branch' does not exist."
    return 1
  fi

  echo "You are about to reset the local branch '$branch' to match the remote 'origin/$branch'."
  echo "Choose reset type:"
  echo "1. Soft (keeps changes in the working directory)"
  echo "2. Hard (discards all local changes)"
  read -rp "Enter your choice: " reset_type

  case $reset_type in
  1)
    git fetch origin
    git reset --soft "origin/$branch"
    echo "Branch '$branch' has been soft-reset to match the remote."
    ;;
  2)
    git fetch origin
    git reset --hard "origin/$branch"
    echo "Branch '$branch' has been hard-reset to match the remote."
    ;;
  *)
    echo "Invalid choice. Reset aborted."
    ;;
  esac
}
prune_remote_branches() {
  ensure_git_repo
  echo "Fetching and pruning stale remote references..."
  git fetch --prune
  echo "Remote references pruned."

  echo "Do you want to delete local branches that are tracking deleted remote branches? (y/n):"
  read -rp "Enter your choice: " delete_local

  if [[ "$delete_local" == "y" ]]; then
    for branch in $(git branch -vv | awk '/: gone]/{print $1}'); do
      echo "Deleting local branch: $branch"
      git branch -D "$branch"
    done
    echo "Deleted all local branches tracking removed remote branches."
  else
    echo "Skipped local branch deletion."
  fi
}

interactive_commit() {
  ensure_git_repo
  echo "Select files to stage (use numbers):"
  git status -s | nl -w2 -s". " | tee /tmp/git_status.txt

  read -rp "Enter file numbers to stage (comma-separated): " file_numbers

  if [[ -z "$file_numbers" ]]; then
    echo "No files selected. Exiting."
    return
  fi

  selected_files=$(echo "$file_numbers" | tr ',' '\n' | while read -r num; do
    sed -n "${num}p" /tmp/git_status.txt | awk '{print $2}'
  done)

  git add $selected_files
  echo "Staged files: $selected_files"
  read -rp "Enter your commit message: " commit_message
  git commit -m "$commit_message"
  echo "Committed changes with message: $commit_message"
}
show_status() {
  ensure_git_repo
  echo "Repository Status:"
  git status -s
  echo ""
  echo "Branch Information:"
  git branch
  echo ""
}
self_update() {
  require_sudo
  local script_url="https://raw.githubusercontent.com/infocyph/Toolset/main/PHP/phpx"
  local temp_file="/tmp/phpx_latest"
  local local_file="/usr/local/bin/phpx"

  echo -e "${YELLOW}Checking for updates...${NC}"

  # Download the latest version of the script to a temporary location
  if curl -fsSL "$script_url" -o "$temp_file"; then
    # Calculate hashes for both the local and downloaded scripts
    local local_hash remote_hash
    local_hash=$(sha256sum "$local_file" | awk '{print $1}')
    remote_hash=$(sha256sum "$temp_file" | awk '{print $1}')

    # Compare hashes to check if an update is necessary
    if [[ "$local_hash" == "$remote_hash" ]]; then
      echo -e "${GREEN}phpx is already up-to-date.${NC}"
      log_action "INFO" "No updates found. phpx is up-to-date."
      rm "$temp_file" # Clean up the temporary file
    else
      echo -e "${YELLOW}Updating phpx...${NC}"
      mv "$temp_file" "$local_file"
      chmod +x "$local_file"
      echo -e "${GREEN}phpx has been updated successfully.${NC}"
      log_action "INFO" "phpx updated successfully."
    fi
  else
    echo -e "${RED}Failed to check for updates.${NC}"
    log_action "ERROR" "Failed to download the latest phpx script."
  fi
}
# Main script logic
case $1 in
status) show_status ;;
commit) interactive_commit ;;
revert) revert_commit ;;
log-file) file_log ;;
fetch) fetch_and_prune ;;
large-files) show_large_files ;;
clean) clean_untracked ;;
cherry-pick) cherry_pick_commit ;;
reset-branch) reset_branch_to_remote ;;
prune) prune_remote_branches ;;
report) fetch_prs_and_commits "$2" "$3" "$4" ;;
diff) track_staged_changes "$2" ;;
stash) stash_operations ;;
create) create_branch "$2" "$3" ;;
sync) sync_branches ;;
merge) merge_branch "$2" "$3" ;;
tag) tag_release "$2" ;;
cleanup) cleanup_branches ;;
compare) compare_branches ;;
config) edit_git_config ;;
summarize) summarize_repo ;;
unstage) unstage_all ;;
amend) amend_commit_message ;;
add-remote) add_remote ;;
push-remote) push_to_remote ;;
pull-remote) pull_from_remote ;;
stage-deleted) stage_deleted_files ;;
stage-deleted-dir) stage_deleted_in_directory ;;
initial-commit) get_initial_commit ;;
latest-tag) get_latest_tag ;;
changelog) generate_changelog ;;
count-changes) count_changes_between_commits ;;
list-changes) list_changed_files_between_branches ;;
set-lf) set_line_endings_to_lf ;;
self-update) self_update ;;
*) usage ;;
esac
